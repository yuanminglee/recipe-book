{
  "version": 3,
  "sources": ["../bundle-frkmux/checked-fetch.js", "../bundle-frkmux/strip-cf-connecting-ip-header.js", "../../../worker.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-frkmux/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-frkmux/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/yuanming/Documents/Cline/recipe-book/.wrangler/tmp/dev-Zfr5yV",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/* worker.js: Cloudflare Worker Script for Recipe Summarization and Push to GitHub */\n\nexport default {\n  async fetch(request, env, ctx) {\n    // Only allow POST requests\n    if (request.method !== \"POST\") {\n      return new Response(\"Status OK\", { status: 200 });\n    }\n\n    let update;\n    try {\n      update = await request.json();\n    } catch (e) {\n      return new Response(\"Bad Request: invalid JSON\", { status: 200 });\n    }\n\n    // Check for Telegram message update\n    const message = update.message;\n    console.log(message);\n    if (!message || !message.text) {\n      console.log(\"No message text provided\");\n      return new Response(\"No message text provided\", { status: 200 });\n    }\n\n    const text = message.text;\n    let recipeContent;\n    let response;\n    // Extract the first URL from the message text\n    const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    const links = text.match(urlRegex);\n    if (!links || text.length > 1000) {\n      console.log(\"No links found in message, using text as recipe content\");\n      recipeContent = text;\n    } else {\n      const recipeUrl = links[0];\n      [recipeContent, response] = await getRecipeContent(\n        env.TELEGRAM_BOT_TOKEN,\n        recipeUrl,\n        message.chat.id\n      );\n      if (response) {\n        return response;\n      }\n    }\n\n    // Prepare prompt and call OpenAI-compatible API to summarize the recipe\n    const openaiApiUrl =\n      env.OPENAI_API_URL || \"https://api.deepseek.com/chat/completions\";\n    const model = env.OPENAI_MODEL || \"deepseek-chat\";\n    const systemPrompt = `You are an expert in cooking and food. You are given a text output of a recipe webpage and you need to convert it into a markdown file in english that is easy to understand and follow in the following format strictly:\n\\`\\`\\`markdown\n---\nlayout: recipe\ntitle: Delicious Pasta\ndescription: A quick and easy pasta dish perfect for weeknight dinners\nservings: 4\nprep_time: 15 minutes\ncook_time: 20 minutes\ningredients:\n  - 1 pound (450g) spaghetti\n  - \"Pasta Sauce\":\n    - 3 cloves garlic, minced\nnotes:\n  - You can substitute any pasta shape you prefer\n---\n\n1. Bring a large pot of salted water to boil. Add pasta and cook according to package directions.\n\n2. While pasta cooks, heat olive oil in a large skillet over medium heat.\n\n3. Add minced garlic and red pepper flakes to the oil and cook until fragrant, about 1 minute.\n\\`\\`\\`\n\nIMPORTANT:Make sure to follow the format strictly. \nIngredients can be nested and grouped into logical parts to help with readability. When nesting ingredients, make sure to surround the key with double quotes.\nInstructions should be below of the yaml section by making sure to close the yaml section with --- after the notes section. \nIf there are no recipe found, do not return any markdown content. Provide metric measurements for weight and volume in brackets.\n`;\n    const prompt = `Start of recipe\\n\\n${recipeContent}\\n\\n End of recipe`;\n    console.log(prompt);\n\n    let summary;\n    try {\n      const openaiResponse = await fetch(openaiApiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${env.OPENAI_API_KEY}`,\n        },\n        body: JSON.stringify({\n          model: model,\n          messages: [\n            { role: \"system\", content: systemPrompt },\n            { role: \"user\", content: prompt },\n          ],\n        }),\n      });\n      if (!openaiResponse.ok) {\n        console.log(\"OpenAI API error: \" + JSON.stringify(openaiResponse));\n        sendTelegramMessage(\n          env.TELEGRAM_BOT_TOKEN,\n          message.chat.id,\n          `OpenAI API error:  \\`\\`\\`${JSON.stringify(openaiResponse)}\\`\\`\\``\n        );\n        return new Response(\"Failed to summarize recipe\", { status: 200 });\n      }\n      const data = await openaiResponse.json();\n      console.log(data);\n      summary =\n        data.choices && data.choices[0] && data.choices[0].message.content;\n    } catch (err) {\n      sendTelegramMessage(\n        env.TELEGRAM_BOT_TOKEN,\n        message.chat.id,\n        \"Error calling summarization API: \" + err\n      );\n      return new Response(\"Error calling summarization API\", { status: 200 });\n    }\n\n    if (!summary) {\n      return new Response(\"No summary produced\", { status: 200 });\n    }\n\n    // Format the markdown content with the summary and original link\n    const markdownContent = `# Recipe Summary\\n\\n${summary.trim()}\\n`;\n    const match = markdownContent.match(\"```markdown\\n((\\n|.)*)```\");\n    if (!match) {\n      sendTelegramMessage(\n        env.TELEGRAM_BOT_TOKEN,\n        message.chat.id,\n        `No recipe found`\n      );\n      return new Response(\"No markdown content found\", { status: 200 });\n    }\n    const recipe = match[1];\n    console.log(recipe);\n\n    // Encode the markdown content in Base64 use TextEncoder\n    const encoder = new TextEncoder(\"base64\");\n    const encodedContent = base64ArrayBuffer(encoder.encode(recipe));\n    const title = recipe.match(/title: (.*)/)[1].replace(/ /g, \"-\");\n\n    // Define the file path for the new markdown file\n    const timestamp = Date.now();\n    const filePath = `_recipes/${timestamp}-${title}.md`;\n\n    // Prepare GitHub API URL for creating/updating a file\n    const githubApiUrl = `https://api.github.com/repos/${env.GITHUB_OWNER}/${env.GITHUB_REPO}/contents/${filePath}`;\n    const body = JSON.stringify({\n      message: \"Add new recipe summary - \" + title,\n      content: encodedContent,\n      branch: env.GITHUB_BRANCH || \"main\",\n    });\n    try {\n      const githubResponse = await fetch(githubApiUrl, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/vnd.github+json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${env.GITHUB_TOKEN}`,\n          \"User-Agent\": \"recipe-worker\",\n          \"X-GitHub-Api-Version\": \"2022-11-28\",\n        },\n        body: body,\n      });\n      if (!githubResponse.ok) {\n        sendTelegramMessage(\n          env.TELEGRAM_BOT_TOKEN,\n          message.chat.id,\n          \"GitHub API error: \" + githubResponse\n        );\n        return new Response(\"Failed to push markdown file to GitHub\", {\n          status: 200,\n        });\n      }\n    } catch (err) {\n      console.error(err);\n      return new Response(\"Error pushing file to GitHub\", { status: 200 });\n    }\n\n    // Send update message to Telegram chat using helper function\n    await sendTelegramMessage(\n      env.TELEGRAM_BOT_TOKEN,\n      message.chat.id,\n      \"Recipe summarized and pushed successfully!\"\n    );\n\n    return new Response(\"Recipe summarized and pushed successfully!\", {\n      status: 200,\n    });\n  },\n};\n\nfunction base64ArrayBuffer(arrayBuffer) {\n  var base64 = \"\";\n  var encodings =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  var bytes = new Uint8Array(arrayBuffer);\n  var byteLength = bytes.byteLength;\n  var byteRemainder = byteLength % 3;\n  var mainLength = byteLength - byteRemainder;\n\n  var a, b, c, d;\n  var chunk;\n\n  // Main loop deals with bytes in chunks of 3\n  for (var i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n    b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n    c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n    d = chunk & 63; // 63       = 2^6 - 1\n\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n  }\n\n  // Deal with the remaining bytes and padding\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength];\n\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\n    // Set the 4 least significant bits to zero\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + \"==\";\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n    b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n\n    // Set the 2 least significant bits to zero\n    c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + \"=\";\n  }\n\n  return base64;\n}\n\nasync function getRecipeContent(token, url, chatId) {\n  // Fetch the recipe content from the URL and extract only plain text using HTMLRewriter\n  try {\n    const recipeResponse = await fetch(url);\n    if (!recipeResponse.ok) {\n      console.log(\"Failed to fetch recipe content\");\n      sendTelegramMessage(\n        token,\n        chatId,\n        \"Failed to fetch recipe content: \" + recipeResponse\n      );\n      return [\n        \"\",\n        new Response(\"Failed to fetch recipe content\", { status: 200 }),\n      ];\n    }\n\n    // Define a handler to accumulate text from the HTML\n    class TextAccumulator {\n      constructor() {\n        this.accumulated = \"\";\n      }\n      text(textChunk) {\n        if (!textChunk.removed) {\n          this.accumulated += textChunk.text;\n        }\n      }\n    }\n\n    class NoopHandler {\n      text(textChunk) {\n        textChunk.remove();\n      }\n    }\n\n    const accumulator = new TextAccumulator();\n    const noopHandler = new NoopHandler();\n    // Use HTMLRewriter to parse the HTML and accumulate text from the body\n    const transformedResponse = new HTMLRewriter()\n      .on(\"img\", noopHandler)\n      .on(\"style\", noopHandler)\n      .on(\"script\", noopHandler)\n      .on(\"div\", accumulator)\n      .transform(recipeResponse);\n\n    // Drain the stream to ensure all text is processed\n    await transformedResponse.arrayBuffer();\n\n    let recipeContent = accumulator.accumulated;\n    // replace image contents with empty string\n    recipeContent = recipeContent\n      .split(\" \")\n      .map((x) => x.trim())\n      .filter((x) => x)\n      .slice(0, 6000)\n      .join(\" \");\n    return [recipeContent, null];\n  } catch (err) {\n    console.log(\"Error fetching recipe content: \" + err);\n    sendTelegramMessage(token, chatId, \"Error fetching recipe content: \" + err);\n    return [\"\", new Response(\"Error fetching recipe content\", { status: 200 })];\n  }\n}\n\n// Helper function to send a message to Telegram chat\nasync function sendTelegramMessage(token, chatId, messageText) {\n  console.log(\"Telegram API Request Details:\", {\n    url: `https://api.telegram.org/${token}/sendMessage`,\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: { chat_id: chatId, text: messageText },\n  });\n  try {\n    const response = await fetch(\n      `https://api.telegram.org/${token}/sendMessage`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ chat_id: chatId, text: messageText }),\n      }\n    );\n    if (!response.ok) {\n      console.error(\n        \"Failed to send Telegram update message:\",\n        await response.text()\n      );\n    }\n  } catch (err) {\n    console.error(\"Error sending Telegram update message:\", err);\n  }\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/yuanming/Documents/Cline/recipe-book/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/yuanming/Documents/Cline/recipe-book/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/yuanming/Documents/Cline/recipe-book/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/yuanming/Documents/Cline/recipe-book/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/yuanming/Documents/Cline/recipe-book/.wrangler/tmp/bundle-frkmux/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/yuanming/Documents/Cline/recipe-book/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/yuanming/Documents/Cline/recipe-book/.wrangler/tmp/bundle-frkmux/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/yuanming/Documents/Cline/recipe-book/.wrangler/tmp/bundle-frkmux/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
